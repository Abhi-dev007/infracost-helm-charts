# Cloud Pricing API

{{ template "chart.versionBadge" . }}{{ template "chart.typeBadge" . }}{{ template "chart.appVersionBadge" . }}

{{ template "chart.description" . }}

## TL;DR

Installing the chart will create three pods: PostgreSQL DB, Cloud Pricing API, and an init job that loads the pricing data. The init job will take a few minutes and exit after the logs show `Completed: downloading DB data` -- you should **wait** for that before running the Infracost CLI. A weekly cronjob is also created to update the prices. Our resource request/limit recommendations are commented-out in the [values.yaml](values.yaml) file per Helm best practices.

  ```sh
  helm repo add infracost https://infracost.github.io/helm-charts/
  helm repo update

  # Run `infracost register` to create an API key, this is used by the weekly job to download the latest cloud pricing data from us.
  helm install cloud-pricing-api infracost/cloud-pricing-api \
    --set job.infracostAPIKey="YOUR_INFRACOST_API_KEY_HERE" \
    --set postgresql.postgresqlPassword="STRONG_PASSWORD_HERE"
  ```

Uninstalling the chart will not delete the PVC used by the PostgreSQL DB.

    ```sh
    helm uninstall cloud-pricing-api
    ```

## Configure CLI to use self-hosted Cloud Pricing API

The best way to get instructions for configuring Infracost to use the self-hosted Cloud Pricing API is to check the output at the end of the `helm install` step since this contains the exact commands you need to run. If these are not available then instructions are below.

If you don't have ingress enabled you can port-forward the Cloud Pricing API to your local machine by doing this:
```sh
export POD_NAME=$(kubectl get pods --namespace <NAMESPACE> -l "app.kubernetes.io/name=cloud-pricing-api,app.kubernetes.io/instance=cloud-pricing-api" -o jsonpath="{.items[0].metadata.name}")
export CONTAINER_PORT=$(kubectl get pod --namespace <NAMESPACE> $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
kubectl --namespace <NAMESPACE> port-forward $POD_NAME 4000:$CONTAINER_PORT
```
You can then use `http://localhost:4000` as the `<CLOUD_PRICING_API_ENDPOINT>` below.

You can retrieve the generated API key using the following command. This is the key your Infracost CLI users will use to authenticate when calling your self-hosted Cloud Pricing API.
```sh
export INFRACOST_API_KEY=$(kubectl get secret --namespace <NAMESPACE> cloud-pricing-api.name --template="{{"{{"}} index .data \"self-hosted-infracost-api-key\" {{"}}"}}" | base64 -D)
```

To configure Infracost to use the self-hosted Cloud Pricing API you can use:
```sh
export INFRACOST_PRICING_API_ENDPOINT=http://<CLOUD_PRICING_API_ENDPOINT>
export INFRACOST_API_KEY=$INFRACOST_API_KEY
infracost breakdown --path /path/to/code
```

## Prerequisites

* Kubernetes 1.12+ with Beta APIs enabled
* Helm >= 3.1.0
* PV provisioner support in the underlying infrastructure

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesSection" . }}

Specify each parameter using the `--set key=value[,key=value]` argument to `helm install`. For example:

```sh
helm install cloud-pricing-api infracost/cloud-pricing-api \
  --set api.selfHostedInfracostAPIKey=CUSTOM_API_KEY
```

Alternatively, a YAML file that specifies the values for the above parameters can be provided while installing the chart. For example:

```sh
helm install -f my-values.yaml cloud-pricing-api infracost/cloud-pricing-api
```

## PostgreSQL

By default, PostgreSQL is installed as part of the chart using the [Bitnami PostgreSQL chart](https://github.com/bitnami/charts/blob/master/bitnami/postgresql/README.md). You can specify the values for this chart by prefixing them with `postgresql.`.

To use an external PostgreSQL server set `postgresql.enabled` to `false` and then set the `postgresql.external.*` values.

To avoid issues when upgrading this chart, provide `postgresql.postgresqlPassword` for subsequent installs and upgrades. This is due to an issue in the PostgreSQL chart where password will be overwritten with randomly generated passwords otherwise. See [here](https://github.com/helm/charts/tree/master/stable/postgresql#upgrade) for more detail.

## Examples

### Install in AWS with ALB ingress

This is how the Infracost team deploys the Cloud Pricing API on our EKS cluster to test it.

```sh
export DOMAIN=cloud-pricing.api.dev.infracost.io
export CERTIFICATE_DOMAIN=*.api.dev.infracost.io
export CERTIFICATE_ARN=$(aws acm list-certificates --query 'CertificateSummaryList[].[CertificateArn,DomainName]' --output text | grep ${CERTIFICATE_DOMAIN} | cut -f1)

helm install cloud-pricing-api infracost/cloud-pricing-api \
  --set ingress.enabled=true \
  --set ingress.hosts\[0\].host=${DOMAIN} \
  --set ingress.hosts\[0\].paths\[0\].path=/\* \
  --set ingress.extraPaths\[0\].path=/\* \
  --set ingress.extraPaths\[0\].backend.serviceName=ssl-redirect \
  --set ingress.extraPaths\[0\].backend.servicePort=use-annotation \
  --set ingress.annotations."kubernetes\.io/ingress\.class"=alb \
  --set ingress.annotations."alb\.ingress\.kubernetes\.io/scheme"=internet-facing \
  --set ingress.annotations."alb\.ingress\.kubernetes\.io/target-type"=ip \
  --set ingress.annotations."alb\.ingress\.kubernetes\.io/certificate-arn"=${CERTIFICATE_ARN} \
  --set ingress.annotations."alb\.ingress\.kubernetes\.io/healthcheck-path"=/health
  --set-string ingress.annotations."alb\.ingress\.kubernetes\.io/listen-ports"="\[\{\"HTTP\": 80\}\, \{\"HTTPS\":443\}\]" \
  --set-string ingress.annotations."alb\.ingress\.kubernetes\.io/ssl-redirect"="\{\"Type\": \"redirect\"\, \"RedirectConfig\": \{ \"Protocol\": \"HTTPS\"\, \"Port\": \"443\"\, \"StatusCode\": \"HTTP_301\"\}\}"
```

## Development

To install the chart from your local repository with the name `my-release`:

```sh
helm install my-release .
```

To uninstall `my-release` deployment:

```sh
helm uninstall my-release
```

To debug issues, such as `job-cron.yaml: error converting YAML to JSON: yaml: line X`, use the following:

```sh
helm template cloud-pricing-api charts/cloud-pricing-api/ --debug > out.yaml
cat out.yaml # look for issues in the YAML in the erroring resource
```
